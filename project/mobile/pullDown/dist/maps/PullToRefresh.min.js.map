{"version":3,"sources":["PullToRefresh.js"],"names":["until","Object","assign","throttle","that","fn","delay","atleast","timer","previous","now","Date","call","clearTimeout","arguments","length","undefined","key","obj1","toString","deepMerge","obj2","merge","_len","arr","Array","_key","item","obj","prefixStyle","_elementStyle","document","createElement","style","_vendor","i","vendors","l","substr","transform","transitionDuration","pull","dampRate","set","height","contentdown","contentover","contentfresh","success","up","defaults","_classCallCheck","this","PullToRefresh","options","querySelector","container","contentnomore","dom","offsetHeight","scrollBox","children","progress","data","firstFull","canPull","pullLoadding","preY","starX","starY","pullHeight","canRefresh","init","classList","upLoading","domHeight","pullBox","add","visibility","createPullBox","createUpbox","progressTxt","firstLoad","pullEvent","scrollBoxColor","getComputedStyle","backgroundColor","upBox","className","innerHTML","childHeight","loadMore","onscroll","flag","scrollTop","scrollHeight","callback","insertBefore","UpNoMore","showPullSuc","remove","setTimeout","_this","refreshSuccess","translate","_this2","initUpLoading","_this3","start","e","changedTouches","clientY","clientX","move","toucheX","toucheY","diff","moveX","Math","moveY","preventDefault","round","end","console","log","pullRefresh","addEventListener","innerText","h","duration","rotate","progressRote","scrollToTop"],"mappings":"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","file":"../js/PullToRefresh.min.js","sourcesContent":["const until=Object.assign(until || {},{\r\n    throttle(that, fn, delay, atleast){         //函数节流\r\n        let timer = null;\r\n        let previous = null;\r\n        return function() {\r\n            var now = +new Date();\r\n            if (!previous) previous = now;\r\n            if (atleast && now - previous > atleast) {\r\n                fn.call(that)\r\n                // 重置上一次开始时间为本次结束时间\r\n                previous = now;\r\n                clearTimeout(timer);\r\n            } else {\r\n                clearTimeout(timer);\r\n                timer = setTimeout(function() {\r\n                    fn.call(that)\r\n                    previous = null;\r\n                }, delay);\r\n            }\r\n        }\r\n    },\r\n    deepMerge:(function(){  //深度合并object\r\n        const merge = (obj1,obj2={})=>{\r\n            let key=\"\";\r\n            for(key in obj2) {\r\n                // 如果target(也就是obj1[key])存在，且是对象的话再去调用deepMerge，否则就是obj1[key]里面没这个对象，需要与obj2[key]合并\r\n                obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\r\n                until.deepMerge(obj1[key], obj2[key]) : obj1[key] = obj2[key];\r\n            }\r\n        }\r\n        return function(...arr){\r\n            let obj={};\r\n            arr.forEach((item)=>{\r\n                merge(obj,item)\r\n            })\r\n            return obj\r\n        }\r\n    })(),\r\n    prefixStyle:(function(){        //css3兼容      \r\n        const _elementStyle = document.createElement('div').style;\r\n        const _vendor = (function() {\r\n            let vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\r\n                transform,\r\n                i = 0,\r\n                l = vendors.length;\r\n\r\n            for (; i < l; i++) {\r\n                transform = vendors[i] + 'ransform';\r\n                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);\r\n            }\r\n            return false;\r\n        })();\r\n        return style =>{\r\n            if (_vendor === false) return false;\r\n            if (_vendor === '') return style;\r\n            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);\r\n\r\n        }\r\n    })()\r\n})\r\n\r\nconst transform = until.prefixStyle('transform');\r\nconst transitionDuration = until.prefixStyle('transitionDuration');\r\n\r\n/*\r\ncontainer:容器\r\npull.set:是否启用上拉（下拉）；\r\npull.height:下拉height，触发刷新\r\npull.callback(this):满足下拉或上拉条件时触发\r\npull.dampRate:阻尼\r\n*/\r\n/*方法  参数为true说明还可以继续操作，为false时说明已经没有数据了\r\n.endUpLoading(flag)  //上拉加载完成后调用\r\n.endPullRefresh(flag)  //下拉刷新 完成后调用\r\n*/\r\n/*默认参数 ↓↓↓↓↓↓↓↓*/\r\nconst defaults = {\r\n    container:\"body\",\r\n    pull:{\r\n        dampRate:0.4,\r\n        set:true,\r\n        height:60,\r\n        contentdown:\"下拉刷新\",\r\n        contentover:\"释放刷新\",\r\n        contentfresh:\"刷新中……\",\r\n        success:\"刷新成功\"\r\n    },\r\n    up:{\r\n        set:true,\r\n        height:120,\r\n        contentfresh:\"正在加载……\",\r\n        contentnomore:\"没有更多数据了\"\r\n    }\r\n\r\n}\r\n/*下拉刷新，上拉加载*/\r\nclass PullToRefresh{\r\n    constructor(options){\r\n        this.options=until.deepMerge({},until.deepMerge(defaults, options));\r\n        if(!!!options.pull || !this.options.pull.set){      //如果没有设置pull，则默认不启用下拉刷新\r\n            this.options.pull.set=false;\r\n        }\r\n        if(!!!options.up || !this.options.up.set){          //同上\r\n            this.options.up.set=false\r\n        }\r\n        this.dom=document.querySelector(this.options.container)\r\n        this.domHeight=this.dom.offsetHeight\r\n        this.scrollBox=this.dom.children[0]\r\n        this.progress=null\r\n        this.data={             //存放数据和状态\r\n            upLoading:false,    //是否增在加载更多\r\n            firstFull:false,    //第一次调用加载时内容是否大于容器，false则继续加载，知道大于为止\r\n            canPull:true,       //是否可以下拉\r\n            pullLoadding:false, //当前是否正在刷新\r\n            preY:0,             //存放上一次的Y坐标\r\n            starX:0,            //存放开始滑动时的坐标\r\n            starY:0,\r\n            pullHeight:0,       //存放下拉的高度\r\n            canRefresh:false,  //能否刷新\r\n        }  \r\n        this.init()\r\n    }\r\n    init(){     \r\n        this.dom.classList.add(\"refreshWrap\")\r\n\r\n        this.createPullBox();\r\n        this.createUpbox();\r\n        \r\n        this.firstLoad()\r\n        this.loadMoreEvent();\r\n\r\n        this.pullEvent()\r\n    }\r\n    firstLoad(){  //初始化组件时，要判断是否需要加载内容来让内容大于滚动容器的高度\r\n        const childHeight=this.scrollBox.offsetHeight;\r\n        if(childHeight<this.domHeight+this.options.up.height && !this.data.firstFull){      //滚动元素小于滚动容器\r\n            this.loadMore(true)\r\n        }else{\r\n            this.data.firstFull=true;\r\n        }\r\n    }\r\n    createPullBox(){    //创建下拉\r\n        if(!this.options.pull.set) return false;\r\n        this.pullBox=document.createElement(\"DIV\");\r\n        this.pullBox.className=\"refresh\";\r\n        this.pullBox.style.visibility=\"hidden\"; //隐藏下拉刷新\r\n        this.pullBox.innerHTML=`<i class=\"loading\"></i><p class=\"loadTxt\">${this.options.pull.contentdown}</p>`;\r\n        this.dom.insertBefore(this.pullBox,this.scrollBox)\r\n        this.progress=this.pullBox.querySelector(\".loading\")\r\n        this.progressTxt=this.pullBox.querySelector(\".loadTxt\")\r\n    }\r\n    createUpbox(){      //创建上拉加载\r\n        if(!this.options.up.set) return false;\r\n        const scrollBoxColor=getComputedStyle(this.scrollBox).backgroundColor;\r\n        this.upBox=document.createElement(\"DIV\")\r\n        this.upBox.className=\"loadingBox\"\r\n        this.upBox.style.backgroundColor=scrollBoxColor      //设置和滚动元素一样的背景，防止露底\r\n        this.upBox.innerHTML=`<i class=\"loading rotate\"></i><p class=\"loadTxt\">${this.options.up.contentfresh}</p>`\r\n        this.dom.appendChild(this.upBox)\r\n    }\r\n    loadMoreEvent(){//上拉加载\r\n        const box=this.dom;\r\n        this.dom.onscroll=until.throttle(this, this.loadMore, 200, 250)\r\n    }\r\n    loadMore(flag=false){   //加载更多  flag为true是可以跳过判断，直接加载更多\r\n        if(this.data.upLoading) return false;\r\n        const scrollTop=this.dom.scrollTop,\r\n              scrollHeight=this.dom.scrollHeight;\r\n        if(scrollTop+this.domHeight+this.options.up.height>=scrollHeight || flag){\r\n            this.data.upLoading=true\r\n            this.options.up.callback && this.options.up.callback(this)\r\n        }\r\n    }\r\n    endUpLoading(flag=true){        //更新上拉状态,flag判断是否还有更多\r\n        if(flag){\r\n            this.data.upLoading=false;\r\n            if(!this.data.firstFull) this.firstLoad();          \r\n        }else{      //没有数据\r\n            this.UpNoMore()\r\n        }\r\n    }\r\n    endPullRefresh(flag=true){       //刷新成功（外部调用）\r\n        this.showPullSuc(flag)\r\n    }\r\n    showPullSuc(flag){\r\n        //显示刷新成功并更改图标\r\n        this.progress.classList.add(\"success\")\r\n        this.progress.style[transform] = `rotate(45deg)`\r\n        this.progressTxt.innerText=this.options.pull.success\r\n\r\n        this.progress.classList.remove(\"rotate\")\r\n\r\n        setTimeout(()=>{\r\n            this.refreshSuccess(flag)\r\n        },1000)\r\n    }\r\n    refreshSuccess(flag){      //刷新成功，重置参数\r\n        this.data.pullLoadding=false;\r\n        this.translate(0,300)\r\n        this.data.pullHeight=0\r\n        this.dom.scrollTop=0\r\n        setTimeout(()=>{this.progress.classList.remove(\"success\")},100)     //移除刷新成功的√\r\n        \r\n        if(!flag){      //刷新时没有数据\r\n            this.pullBox.style.visibility=\"hidden\" //隐藏下拉刷新\r\n            this.UpNoMore();\r\n            return false;\r\n        }\r\n        /*重置上拉加载的参数*/\r\n        this.initUpLoading()\r\n        setTimeout(()=>{     \r\n            this.firstLoad();   //下一次渲染的时候判断是否需要加载更多\r\n            this.pullBox.style.visibility=\"hidden\" //隐藏下拉刷新\r\n        },100)\r\n    }\r\n    UpNoMore(){\r\n        this.upBox.classList.add(\"noMore\")\r\n        this.upBox.querySelector(\".loadTxt\").innerHTML=this.options.up.contentnomore\r\n    }\r\n    pullEvent(){            //为下拉刷新绑定事件\r\n        if(!this.options.pull.set) return false;\r\n        const start = e => {\r\n            this.data.canRefresh=false\r\n            const scrollTop=this.dom.scrollTop;\r\n            this.data.canPull=scrollTop>0?false:true       //根据滚动到顶部判断是否可以启用下拉\r\n            this.data.preY=this.data.starY = e.changedTouches[0].clientY || e.clientY\r\n            this.data.starX = e.changedTouches[0].clientX || e.clientX\r\n        }   \r\n        const move = e =>{\r\n            const scrollTop=this.dom.scrollTop;\r\n            if(this.data.pullLoadding || !this.data.canPull) return false;      //当前不是下拉状态活不是正在刷新状态\r\n            this.pullBox.style.visibility=\"visible\"; //隐藏下拉刷新\r\n            const toucheX=e.changedTouches[0].clientX || e.clientX,\r\n                  toucheY=e.changedTouches[0].clientY || e.clientY;\r\n            const diff=toucheY-this.data.preY;  //当前移动点相对于上一次移动点的位移\r\n            this.data.preY=toucheY\r\n            const moveX=toucheX-this.data.starX,    //记录移动的距离\r\n                  moveY=toucheY-this.data.starY;\r\n            if(Math.abs(moveX)>Math.abs(moveY)){        //左右滑动\r\n                return false\r\n            }\r\n            if(moveY<0){        //向上移动 \r\n                this.data.canPull=false\r\n                return false \r\n            }   \r\n            e.preventDefault();\r\n            if(this.options.pullHeight<this.options.pull.height){       //没有到达可以刷新的距离\r\n                this.data.pullHeight+=diff\r\n            }else{                  //到达可以刷新的高度\r\n                if(diff<0){     \r\n                    this.data.pullHeight+=diff\r\n                }else{\r\n                    this.data.pullHeight+=diff*this.options.pull.dampRate\r\n                }               \r\n            }\r\n            this.data.pullHeight=Math.round(this.data.pullHeight)\r\n            this.translate(this.data.pullHeight)\r\n            this.progressRote(this.data.pullHeight)\r\n        }   \r\n        const end = e =>{\r\n            const scrollTop=this.dom.scrollTop;\r\n            if(this.data.pullLoadding) return false;  //当前是正在刷新状态\r\n            if(!this.data.canPull){       //当前不是下拉状态\r\n                if(this.data.pullHeight!=0){\r\n                    this.data.pullHeight=0;\r\n                    this.translate(0,0)\r\n                }\r\n                return false\r\n            }\r\n            this.preY=0;\r\n            this.starY=0;\r\n            this.starX=0;\r\n            if(this.data.canRefresh){       //刷新\r\n                console.log('---------------')\r\n                this.pullRefresh()\r\n            }else{      //不刷新\r\n                this.pullBox.style.visibility=\"hidden\"; //隐藏下拉刷新\r\n                this.data.pullHeight=0;\r\n                this.translate(0,300)\r\n                this.dom.scrollTop=0\r\n            }\r\n        }\r\n        this.dom.addEventListener('touchstart',e=>{\r\n            start(e)\r\n        }, false)\r\n        this.dom.addEventListener('touchmove',e=> {\r\n            move(e)\r\n        }, false);\r\n        this.dom.addEventListener('touchend',e => {\r\n            end(e)\r\n        }, false)\r\n    }\r\n    pullRefresh(){          //刷新\r\n        this.data.pullLoadding=true\r\n        this.translate(this.options.pull.height,300)\r\n        this.data.pullHeight=this.options.pull.height\r\n        this.progressTxt.innerText=this.options.pull.contentfresh\r\n        this.options.pull.callback && this.options.pull.callback(this)\r\n        this.progress.classList.add(\"rotate\")\r\n    }\r\n    translate(h=0,duration=0){\r\n        this.upBox.style[transitionDuration] =`${duration}ms`\r\n        this.upBox.style[transform] = `translate3d(0,${h}px,0)`\r\n        this.scrollBox.style[transitionDuration] =`${duration}ms`\r\n        this.scrollBox.style[transform] = `translate3d(0,${h}px,0)`\r\n    }\r\n    progressRote(h=0){          //更改下拉刷新的文字和动画\r\n        const r=360;\r\n        let rotate=r*h/this.options.pull.height\r\n        this.progress.style[transform] = `rotate(${rotate}deg)`\r\n        if(h>=this.options.pull.height){        //可以刷新\r\n            if(!this.data.canRefresh){\r\n                this.progressTxt.innerText=this.options.pull.contentover\r\n                this.data.canRefresh=true\r\n            }\r\n            return false               \r\n        }else{          //不可以刷新\r\n            if(this.data.canRefresh){\r\n                this.progressTxt.innerText=this.options.pull.contentdown\r\n                this.data.canRefresh=false\r\n            }\r\n            return false              \r\n        }\r\n    }\r\n    initUpLoading(){  //重置上拉加载的状态        \r\n        this.data.firstFull=false\r\n        this.data.upLoading=false\r\n        this.upBox.classList.remove(\"noMore\")\r\n        this.upBox.querySelector(\".loadTxt\").innerHTML=this.options.up.contentfresh\r\n    }\r\n    scrollToTop(){\r\n        this.dom.scrollTop=0\r\n    }\r\n    triggerPullLoading(){       //主动触发刷新\r\n        if(!this.options.pull.set) return false;\r\n        this.pullBox.style.visibility=\"visible\"\r\n        this.scrollToTop()\r\n        this.pullRefresh()\r\n    }\r\n    triggerUpLoading(){         //主动触发上拉加载\r\n        this.initUpLoading()\r\n        this.loadMore(true)\r\n    }\r\n}\r\n"]}
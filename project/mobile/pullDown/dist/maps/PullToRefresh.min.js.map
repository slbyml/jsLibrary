{"version":3,"sources":["PullToRefresh.js"],"names":["_PTFuntil","throttle","that","fn","delay","atleast","timer","previous","now","Date","call","clearTimeout","arguments","length","undefined","key","obj1","toString","deepMerge","obj2","merge","_len","arr","Array","_key","item","obj","prefixStyle","_elementStyle","document","createElement","style","_vendor","i","vendors","l","substr","transform","transitionDuration","container","pull","dampRate","set","height","contentdown","contentover","contentfresh","success","up","defaults","_classCallCheck","this","PullToRefresh","options","querySelector","contentnomore","dom","offsetHeight","scrollBox","children","progress","data","firstFull","canPull","pullLoadding","preY","starX","starY","pullHeight","canRefresh","init","classList","upLoading","domHeight","pullBox","add","visibility","createPullBox","createUpbox","progressTxt","firstLoad","pullEvent","scrollBoxColor","getComputedStyle","backgroundColor","upBox","className","innerHTML","childHeight","onscroll","loadMore","scrollCallback","flag","scrollTop","scrollHeight","callback","UpNoMore","showPullSuc","appendChild","innerText","remove","setTimeout","_this","refreshSuccess","_this2","translate","initUpLoading","_this3","start","e","changedTouches","clientY","clientX","move","toucheX","toucheY","diff","moveX","moveY","Math","abs","round","pullRefresh","addEventListener","end","h","duration","rotate","preventDefault","progressRote","scrollToTop"],"mappings":"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","file":"../js/PullToRefresh.min.js","sourcesContent":["let _PTFuntil={\r\n    throttle(that, fn, delay, atleast){         //函数节流\r\n        let timer = null;\r\n        let previous = null;\r\n        return function() {\r\n            var now = +new Date();\r\n            if (!previous) previous = now;\r\n            if (atleast && now - previous > atleast) {\r\n                fn.call(that)\r\n                // 重置上一次开始时间为本次结束时间\r\n                previous = now;\r\n                clearTimeout(timer);\r\n            } else {\r\n                clearTimeout(timer);\r\n                timer = setTimeout(function() {\r\n                    fn.call(that)\r\n                    previous = null;\r\n                }, delay);\r\n            }\r\n        }\r\n    },\r\n    deepMerge:(function(){  //深度合并object\r\n        const merge = (obj1,obj2={})=>{\r\n            let key=\"\";\r\n            for(key in obj2) {\r\n                // 如果target(也就是obj1[key])存在，且是对象的话再去调用deepMerge，否则就是obj1[key]里面没这个对象，需要与obj2[key]合并\r\n                obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\r\n                _PTFuntil.deepMerge(obj1[key], obj2[key]) : obj1[key] = obj2[key];\r\n            }\r\n        }\r\n        return function(...arr){\r\n            let obj={};\r\n            arr.forEach((item)=>{\r\n                merge(obj,item)\r\n            })\r\n            return obj\r\n        }\r\n    })(),\r\n    prefixStyle:(function(){        //css3兼容      \r\n        const _elementStyle = document.createElement('div').style;\r\n        const _vendor = (function() {\r\n            let vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\r\n                transform,\r\n                i = 0,\r\n                l = vendors.length;\r\n\r\n            for (; i < l; i++) {\r\n                transform = vendors[i] + 'ransform';\r\n                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);\r\n            }\r\n            return false;\r\n        })();\r\n        return style =>{\r\n            if (_vendor === false) return false;\r\n            if (_vendor === '') return style;\r\n            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);\r\n\r\n        }\r\n    })()\r\n}\r\n\r\nconst transform = _PTFuntil.prefixStyle('transform');\r\nconst transitionDuration = _PTFuntil.prefixStyle('transitionDuration');\r\n\r\n/*\r\ncontainer:容器\r\npull.set:是否启用上拉（下拉）；\r\npull.height:下拉height，触发刷新\r\npull.callback(this):满足下拉或上拉条件时触发\r\npull.dampRate:阻尼\r\n*/\r\n/*方法  参数为true说明还可以继续操作，为false时说明已经没有数据了\r\n.endUpLoading(flag)  //上拉加载完成后调用\r\n.endPullRefresh(flag)  //下拉刷新 完成后调用\r\n.initUpLoading()  //当不是由下拉或上拉改变得容器里面所有内容时，一定要先重置下拉状态，否则会有bug\r\n*/\r\n/*默认参数 ↓↓↓↓↓↓↓↓*/\r\nconst defaults = {\r\n    container:\"body\",\r\n    pull:{\r\n        dampRate:0.4,\r\n        set:true,\r\n        height:60,\r\n        contentdown:\"下拉刷新\",\r\n        contentover:\"释放刷新\",\r\n        contentfresh:\"刷新中……\",\r\n        success:\"刷新成功\"\r\n    },\r\n    up:{\r\n        set:true,\r\n        height:120,\r\n        contentfresh:\"正在加载……\",\r\n        contentnomore:\"没有更多数据了\"\r\n    }\r\n\r\n}\r\n/*下拉刷新，上拉加载*/\r\nclass PullToRefresh{\r\n    constructor(options){\r\n        this.options=_PTFuntil.deepMerge({},_PTFuntil.deepMerge(defaults, options));\r\n        if(!!!options.pull || !this.options.pull.set){      //如果没有设置pull，则默认不启用下拉刷新\r\n            this.options.pull.set=false;\r\n        }\r\n        if(!!!options.up || !this.options.up.set){          //同上\r\n            this.options.up.set=false\r\n        }\r\n        this.dom=document.querySelector(this.options.container)\r\n        this.domHeight=this.dom.offsetHeight\r\n        this.scrollBox=this.dom.children[0]\r\n        this.progress=null\r\n        this.data={             //存放数据和状态\r\n            upLoading:false,    //是否增在加载更多\r\n            firstFull:false,    //第一次调用加载时内容是否大于容器，false则继续加载，知道大于为止\r\n            canPull:true,       //是否可以下拉\r\n            pullLoadding:false, //当前是否正在刷新\r\n            preY:0,             //存放上一次的Y坐标\r\n            starX:0,            //存放开始滑动时的坐标\r\n            starY:0,\r\n            pullHeight:0,       //存放下拉的高度\r\n            canRefresh:false,  //能否刷新\r\n        }  \r\n        this.init()\r\n    }\r\n    init(){     \r\n        this.dom.classList.add(\"refreshWrap\")\r\n\r\n        this.createPullBox();\r\n        this.createUpbox();\r\n        \r\n        this.firstLoad()\r\n        this.loadMoreEvent();\r\n\r\n        this.pullEvent()\r\n    }\r\n    firstLoad(){  //初始化组件时，要判断是否需要加载内容来让内容大于滚动容器的高度\r\n        const childHeight=this.scrollBox.offsetHeight;\r\n        if(childHeight<this.domHeight+this.options.up.height && !this.data.firstFull){      //滚动元素小于滚动容器\r\n            this.loadMore(true)\r\n        }else{\r\n            this.data.firstFull=true;\r\n        }\r\n    }\r\n    createPullBox(){    //创建下拉\r\n        if(!this.options.pull.set) return false;\r\n        this.pullBox=document.createElement(\"DIV\");\r\n        this.pullBox.className=\"refresh\";\r\n        this.pullBox.style.visibility=\"hidden\"; //隐藏下拉刷新\r\n        this.pullBox.innerHTML=`<i class=\"loading\"></i><p class=\"loadTxt\">${this.options.pull.contentdown}</p>`;\r\n        this.dom.insertBefore(this.pullBox,this.scrollBox)\r\n        this.progress=this.pullBox.querySelector(\".loading\")\r\n        this.progressTxt=this.pullBox.querySelector(\".loadTxt\")\r\n    }\r\n    createUpbox(){      //创建上拉加载\r\n        if(!this.options.up.set) return false;\r\n        const scrollBoxColor=getComputedStyle(this.scrollBox).backgroundColor;\r\n        this.upBox=document.createElement(\"DIV\")\r\n        this.upBox.className=\"loadingBox\"\r\n        this.upBox.style.backgroundColor=scrollBoxColor      //设置和滚动元素一样的背景，防止露底\r\n        this.upBox.innerHTML=`<i class=\"loading rotate\"></i><p class=\"loadTxt\">${this.options.up.contentfresh}</p>`\r\n        this.dom.appendChild(this.upBox)\r\n    }\r\n    loadMoreEvent(){//上拉加载\r\n        this.dom.onscroll=_PTFuntil.throttle(this, this.scrollCallback, 200, 250)\r\n    }\r\n    scrollCallback(){\r\n        if(!this.data.firstFull) return false;    //  当不是由下拉或上拉改变得容器里面所有内容时,如果改变之前有滚动条，改变之后没有，则可能会触发一次scroll,会造成两次请求\r\n        this.loadMore()\r\n    }\r\n    loadMore(flag=false){   //加载更多  flag为true是可以跳过判断，直接加载更多\r\n        if(this.data.upLoading) return false;\r\n        const scrollTop=this.dom.scrollTop,\r\n              scrollHeight=this.dom.scrollHeight;\r\n        if(flag || scrollTop+this.domHeight+this.options.up.height>=scrollHeight){\r\n            this.data.upLoading=true\r\n            this.options.up.callback && this.options.up.callback(this)\r\n        }\r\n    }\r\n    endUpLoading(flag=true){        //更新上拉状态,flag判断是否还有更多\r\n        if(flag){\r\n            this.data.upLoading=false;\r\n            if(!this.data.firstFull) this.firstLoad();          \r\n        }else{      //没有数据\r\n            this.UpNoMore()\r\n        }\r\n    }\r\n    endPullRefresh(flag=true){       //刷新成功（外部调用）\r\n        this.showPullSuc(flag)\r\n    }\r\n    showPullSuc(flag){\r\n        //显示刷新成功并更改图标\r\n        this.progress.classList.add(\"success\")\r\n        this.progress.style[transform] = `rotate(45deg)`\r\n        this.progressTxt.innerText=this.options.pull.success\r\n\r\n        this.progress.classList.remove(\"rotate\")\r\n\r\n        setTimeout(()=>{\r\n            this.refreshSuccess(flag)\r\n        },1000)\r\n    }\r\n    refreshSuccess(flag){      //刷新成功，重置参数\r\n        this.data.pullLoadding=false;\r\n        this.translate(0,300)\r\n        this.data.pullHeight=0\r\n        this.dom.scrollTop=0\r\n        setTimeout(()=>{this.progress.classList.remove(\"success\")},100)     //移除刷新成功的√\r\n        \r\n        if(!flag){      //刷新时没有数据\r\n            this.pullBox.style.visibility=\"hidden\" //隐藏下拉刷新\r\n            this.UpNoMore();\r\n            return false;\r\n        }\r\n        /*重置上拉加载的参数*/\r\n        this.initUpLoading()\r\n        setTimeout(()=>{     \r\n            this.firstLoad();   //下一次渲染的时候判断是否需要加载更多\r\n            this.pullBox.style.visibility=\"hidden\" //隐藏下拉刷新\r\n        },100)\r\n    }\r\n    UpNoMore(){\r\n        this.upBox.classList.add(\"noMore\")\r\n        this.upBox.querySelector(\".loadTxt\").innerHTML=this.options.up.contentnomore\r\n    }\r\n    pullEvent(){            //为下拉刷新绑定事件\r\n        if(!this.options.pull.set) return false;\r\n        const start = e => {\r\n            this.data.canRefresh=false\r\n            const scrollTop=this.dom.scrollTop;\r\n            this.data.canPull=scrollTop>0?false:true       //根据滚动到顶部判断是否可以启用下拉\r\n            this.data.preY=this.data.starY = e.changedTouches[0].clientY || e.clientY\r\n            this.data.starX = e.changedTouches[0].clientX || e.clientX\r\n        }   \r\n        const move = e =>{\r\n            const scrollTop=this.dom.scrollTop;\r\n            if(this.data.pullLoadding || !this.data.canPull) return false;      //当前不是下拉状态活不是正在刷新状态\r\n            this.pullBox.style.visibility=\"visible\"; //隐藏下拉刷新\r\n            const toucheX=e.changedTouches[0].clientX || e.clientX,\r\n                  toucheY=e.changedTouches[0].clientY || e.clientY;\r\n            const diff=toucheY-this.data.preY;  //当前移动点相对于上一次移动点的位移\r\n            this.data.preY=toucheY\r\n            const moveX=toucheX-this.data.starX,    //记录移动的距离\r\n                  moveY=toucheY-this.data.starY;\r\n            if(Math.abs(moveX)>Math.abs(moveY)){        //左右滑动\r\n                return false\r\n            }\r\n            if(moveY<0){        //向上移动 \r\n                this.data.canPull=false\r\n                return false \r\n            }   \r\n            e.preventDefault();\r\n            if(this.options.pullHeight<this.options.pull.height){       //没有到达可以刷新的距离\r\n                this.data.pullHeight+=diff\r\n            }else{                  //到达可以刷新的高度\r\n                if(diff<0){     \r\n                    this.data.pullHeight+=diff\r\n                }else{\r\n                    this.data.pullHeight+=diff*this.options.pull.dampRate\r\n                }               \r\n            }\r\n            this.data.pullHeight=Math.round(this.data.pullHeight)\r\n            this.translate(this.data.pullHeight)\r\n            this.progressRote(this.data.pullHeight)\r\n        }   \r\n        const end = e =>{\r\n            const scrollTop=this.dom.scrollTop;\r\n            if(this.data.pullLoadding) return false;  //当前是正在刷新状态\r\n            if(!this.data.canPull){       //当前不是下拉状态\r\n                if(this.data.pullHeight!=0){\r\n                    this.data.pullHeight=0;\r\n                    this.translate(0,0)\r\n                }\r\n                return false\r\n            }\r\n            this.data.preY=0;\r\n            this.data.starY=0;\r\n            this.data.starX=0;\r\n            if(this.data.canRefresh){       //刷新\r\n                this.pullRefresh()\r\n            }else{      //不刷新\r\n                this.pullBox.style.visibility=\"hidden\"; //隐藏下拉刷新\r\n                this.data.pullHeight=0;\r\n                this.translate(0,300)\r\n                this.dom.scrollTop=0\r\n            }\r\n        }\r\n        this.dom.addEventListener('touchstart',e=>{\r\n            start(e)\r\n        }, false)\r\n        this.dom.addEventListener('touchmove',e=> {\r\n            move(e)\r\n        }, false);\r\n        this.dom.addEventListener('touchend',e => {\r\n            end(e)\r\n        }, false)\r\n    }\r\n    pullRefresh(){          //刷新\r\n        this.data.pullLoadding=true\r\n        this.translate(this.options.pull.height,300)\r\n        this.data.pullHeight=this.options.pull.height\r\n        this.progressTxt.innerText=this.options.pull.contentfresh\r\n        this.options.pull.callback && this.options.pull.callback(this)\r\n        this.progress.classList.add(\"rotate\")\r\n    }\r\n    translate(h=0,duration=0){\r\n        this.upBox.style[transitionDuration] =`${duration}ms`\r\n        this.upBox.style[transform] = `translate3d(0,${h}px,0)`\r\n        this.scrollBox.style[transitionDuration] =`${duration}ms`\r\n        this.scrollBox.style[transform] = `translate3d(0,${h}px,0)`\r\n    }\r\n    progressRote(h=0){          //更改下拉刷新的文字和动画\r\n        const r=360;\r\n        let rotate=r*h/this.options.pull.height\r\n        this.progress.style[transform] = `rotate(${rotate}deg)`\r\n        if(h>=this.options.pull.height){        //可以刷新\r\n            if(!this.data.canRefresh){\r\n                this.progressTxt.innerText=this.options.pull.contentover\r\n                this.data.canRefresh=true\r\n            }\r\n            return false               \r\n        }else{          //不可以刷新\r\n            if(this.data.canRefresh){\r\n                this.progressTxt.innerText=this.options.pull.contentdown\r\n                this.data.canRefresh=false\r\n            }\r\n            return false              \r\n        }\r\n    }\r\n    initUpLoading(){  //重置上拉加载的状态        \r\n        this.data.firstFull=false\r\n        this.data.upLoading=false\r\n        this.upBox.classList.remove(\"noMore\")\r\n        this.upBox.querySelector(\".loadTxt\").innerHTML=this.options.up.contentfresh\r\n    }\r\n    scrollToTop(){\r\n        this.dom.scrollTop=0\r\n    }\r\n    triggerPullLoading(){       //主动触发刷新\r\n        if(!this.options.pull.set) return false;\r\n        this.pullBox.style.visibility=\"visible\"\r\n        this.scrollToTop()\r\n        this.pullRefresh()\r\n    }\r\n    triggerUpLoading(){         //主动触发上拉加载\r\n        this.initUpLoading()\r\n        this.loadMore(true)\r\n    }\r\n}\r\n"]}